#!/usr/bin/env python3
# Copyright 2021 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Learn more at: https://juju.is/docs/sdk

"""Charm the service.

Refer to the following post for a quick-start guide that will help you
develop a new k8s charm using the Operator Framework:

    https://discourse.charmhub.io/t/4208
"""

import logging
import os
import textwrap

from contextlib import contextmanager

from kazoo.client import KazooClient

from ops.charm import CharmBase
from ops.framework import StoredState
from ops.main import main
from ops.model import ActiveStatus

logger = logging.getLogger(__name__)


class ZookeeperK8SCharm(CharmBase):
    """Charm the service."""

    __PEBBLE_SERVICE_NAME = 'zookeeper'
    _stored = StoredState()  # FIXME remove?

    def __init__(self, *args):
        super().__init__(*args)
        self.framework.observe(self.on.zookeeper_pebble_ready,
                               self._on_zookeeper_pebble_ready)
        self.framework.observe(self.on.config_changed, self._on_config_changed)
        self.framework.observe(self.on.dump_data_action,
                               self._on_dump_data_action)
        self.framework.observe(self.on.seed_data_action,
                               self._on_seed_data_action)
        self._stored.set_default(things=[])

    def _on_zookeeper_pebble_ready(self, event):
        """Define and start a workload using the Pebble API.

        Learn more about Pebble layers at https://github.com/canonical/pebble
        """
        container = event.workload

        self.__push_zookeeper_config(container)

        pebble_layer = {
            "summary": "zookeeper layer",
            "description": "pebble config layer for zookeeper",
            "services": {
                self.__PEBBLE_SERVICE_NAME: {
                    "override": "replace",
                    "summary": "zookeeper",
                    "command": "/docker-entrypoint.sh zkServer.sh start-foreground",
                    "startup": "enabled",
                }
            },
        }
        container.add_layer("zookeeper", pebble_layer, combine=True)

        # Autostart any services that were defined with startup: enabled
        container.autostart()

        # Learn more about statuses in the SDK docs:
        # https://juju.is/docs/sdk/constructs#heading--statuses
        self.unit.status = ActiveStatus()

    def _on_config_changed(self, _):
        """Adapt ZooKeeper on Juju config changes.

        Learn more about config at https://juju.is/docs/sdk/config
        """
        container = self.unit.get_container('zookeeper')
        self.__push_zookeeper_config(container)
        self.__restart_zookeeper(container)

    def _on_dump_data_action(self, event):
        """Action that prints ZooKeeper's content.

        Learn more about actions at https://juju.is/docs/sdk/actions
        """
        def _get_tree(path, zk):
            """Recursive function returning the tree as a dict.
            """
            children = zk.get_children(path)
            if not len(children):
                value = zk.get(path)[0]
                return value
            return {child: _get_tree(os.path.join(path, child), zk)
                    for child in children}

        with self.__zookeeper_client() as zk:
            content = _get_tree('/', zk)
        event.set_results({'content': content})

    def _on_seed_data_action(self, event):
        """Action that seeds ZooKeeper with some test data.

        Learn more about actions at https://juju.is/docs/sdk/actions
        """
        with self.__zookeeper_client() as zk:
            zk.ensure_path('/test-seed')
            zk.create('/test-seed/my-first-key', b'my first value')
            zk.create('/test-seed/my-second-key', b'my second value')
        event.set_results({})

    def __push_zookeeper_config(self, workload_container):
        """Write ZooKeeper's config file on disk.

        :param workload_container: the container in which ZooKeeper is running
        :type workload_container: ops.model.Container
        """
        CONFIG_FILE_PATH = '/conf/zoo.cfg'

        client_port = self.config['client-port']
        server_port = self.config['server-port']
        leader_election_port = self.config['leader-election-port']

        config_file_content = textwrap.dedent(f'''\
        # Generated by the Charmed Operator
        dataDir=/data
        clientPort={client_port}
        dataLogDir=/datalog
        tickTime=2000
        initLimit=5
        syncLimit=2
        autopurge.snapRetainCount=3
        autopurge.purgeInterval=0
        maxClientCnxns=60
        standaloneEnabled=true
        admin.enableServer=true
        server.1=localhost:{server_port}:{leader_election_port}
        ''')
        logging.debug('Writing config to {}:\n{}'.format(CONFIG_FILE_PATH,
                                                         config_file_content))
        workload_container.push(path=CONFIG_FILE_PATH,
                                source=config_file_content)

    def __restart_zookeeper(self, workload_container):
        """Restart ZooKeeper by restarting the Pebble services.

        :param workload_container: the container in which ZooKeeper is running
        :type workload_container: ops.model.Container
        """
        services = workload_container.get_plan().to_dict().get('services', {})
        if not len(services):
            # No Pebble service defined yet, too early:
            return

        logging.info('Restarting ZooKeeper...')
        workload_container.stop(self.__PEBBLE_SERVICE_NAME)
        # Autostart any services that were defined with startup: enabled :
        workload_container.autostart()

    @contextmanager
    def __zookeeper_client(self):
        client_port = self.config['client-port']
        zk = KazooClient(hosts='127.0.0.1:{}'.format(client_port))
        zk.start()
        try:
            yield zk
        finally:
            zk.stop()


if __name__ == "__main__":
    main(ZookeeperK8SCharm)
